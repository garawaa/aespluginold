<templateSet group="aes_bluetooth">
  <template name="aes_bluetooth_Verify_that_Bluetooth_is_supported" value="// To use this BluetoothAdapter method, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&#10;// Trying to get the adapter&#10;BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();&#10;if (btAdapter == null) {&#10; // Bluetooth is not supported, do something here to warn the user&#10; return;&#10;}&#10;" description="Verify that the device supports Bluetooth by trying to get the Bluetooth adapter" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_bluetooth_Connect_to_a_device" value="// To use these BluetoothAdapter methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&#10;/*&#10;* This code is loose here but you will&#10;* likely use it inside a thread&#10;*&#10;* Make sure you have the 'device' variable (BluetoothDevice)&#10;* at the point you insert this code&#10;*/&#10;// UUID for your application&#10;UUID MY_UUID = UUID.fromString(&quot;yourdata&quot;);&#10;// Get the adapter&#10;BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();&#10;// The socket&#10;BluetoothSocket socket = null;&#10;try {&#10; // Your app UUID string (is also used by the server)&#10; socket = device.createRfcommSocketToServiceRecord(MY_UUID);&#10;} catch (IOException e) { }&#10;// For performance reasons&#10;btAdapter.cancelDiscovery();&#10;try {&#10; // Be aware that this is a blocking operation. You probably want to use this in a thread&#10; socket.connect();&#10;&#10;} catch (IOException connectException) {&#10; // Unable to connect; close the socket and get out&#10; try {&#10; socket.close();&#10; } catch (IOException closeException) {&#10; // Deal with it&#10; }&#10; return;&#10;}&#10;// Now manage your connection (in a separate thread)&#10;myConnectionManager(socket);&#10;" description="Connect to a device" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_bluetooth_Enable_Bluetooth" value="// To use these BluetoothAdapter methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&#10;/* This number is used to identify this request (&quot;Enable Bluetooth&quot;)&#10;* when the callback method onActivityResult() is called. Your&#10;* interaction with the Bluetooth stack will probably start there.&#10;*&#10;* You probably want to insert this as a global variable&#10;*/&#10;int ENABLE_BLUETOOTH = 1;&#10;&#10;// Get the adapter&#10;BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();&#10;if (btAdapter == null) {&#10; return;&#10;}&#10;&#10;// If Bluetooth is not yet enabled, enable it&#10;if (!btAdapter.isEnabled()) {&#10; Intent enableBluetooth = new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);&#10; startActivityForResult(enableBluetooth, ENABLE_BLUETOOTH);&#10; // Now implement the onActivityResult() and wait for it to be invoked with ENABLE_BLUETOOTH&#10;}&#10;" description="If Bluetooth is supported, enables it such that you receive a callback when it is enabled" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_bluetooth_Get_paired_devices" value="// To use these BluetoothAdapter methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&#10;// Get the adapter&#10;BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();&#10;// Get the paired devices&#10;Set&lt;BluetoothDevice&gt; devices = btAdapter.getBondedDevices();&#10;// If there are paired devices, do whatever you're supposed to do&#10;if (devices.size() &gt; 0) {&#10; for (BluetoothDevice pairedDevice : devices) {&#10; // do something useful with the device&#10; }&#10;}&#10;" description="Gets the set of devices paired with this one" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_bluetooth_Ensure_that_this_device_is_discoverable" value="// To use these BluetoothAdapter methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&#10;//Get the adapter&#10;BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();&#10;if (btAdapter == null) {&#10; return;&#10;}&#10;// If Bluetooth is not discoverable, make it discoverable&#10;if (btAdapter.getScanMode() !=&#10;BluetoothAdapter.SCAN_MODE_CONNECTABLE_DISCOVERABLE) {&#10;Intent makeDiscoverable = new&#10;Intent(BluetoothAdapter.ACTION_REQUEST_DISCOVERABLE);&#10; makeDiscoverable.putExtra(BluetoothAdapter.EXTRA_DISCOVERABLE_DURATION, 500);&#10;// In a real situation you would probably use startActivityForResult to get the user's choice.&#10; startActivity(makeDiscoverable);&#10;}&#10;" description="If this device is not discoverable, make it so" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_bluetooth_Wait_for_incoming_connections" value="// To use these BluetoothAdapter methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&#10;// UUID for your application&#10;UUID MY_UUID = UUID.fromString(&quot;yourdata&quot;);&#10;// SDP record name used when creating the server socket&#10;String NAME = &quot;BluetoothExample&quot;;&#10;// The server socket&#10;BluetoothServerSocket btServerSocket = null;&#10;// The adapter&#10;BluetoothAdapter btAdapter = BluetoothAdapter.getDefaultAdapter();&#10;// The socket&#10;BluetoothSocket socket = null;&#10;try {&#10;btServerSocket = btAdapter.listenUsingRfcommWithServiceRecord(NAME,&#10;MY_UUID);&#10;// This operation is blocking: you will wait until it returns or an error occurs&#10; socket = btServerSocket.accept();&#10;} catch (IOException e) {&#10;// Deal with it&#10;}&#10;if (socket != null) {&#10;/* The connection was accepted. Do what you want to do.&#10;* For example, get the streams&#10;*/&#10; InputStream inputStream = null;&#10; OutputStream outputStream = null;&#10; try {&#10; inputStream = socket.getInputStream();&#10; outputStream = socket.getOutputStream();&#10; } catch (IOException e) {&#10; // Deal with it&#10; }&#10;}&#10;" description="Code (likely to run on a thread) that creates a listening, secure RFCOMM Bluetooth  socket, retrieves incoming connections, and opens input and output streams connected to the socket." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_bluetooth_Register_for_remote_device_discovery" value="// To use these BluetoothDevice methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.BLUETOOTH&quot;/&gt;&#10;// BroadcastReceiver that is notified as each device is found and when the discovery process completes&#10;// Should be an internal class or in a separate .java file&#10;final BroadcastReceiver bluetoothReceiver = new BroadcastReceiver() {&#10; @Override&#10; public void onReceive(Context context, Intent intent) {&#10; String action = intent.getAction();&#10; // Device was discovered&#10; if (BluetoothDevice.ACTION_FOUND.equals(action)) {&#10; BluetoothDevice device =&#10;intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);&#10; if (device.getBondState() != BluetoothDevice.BOND_BONDED) {&#10; // device is not already paired. Do something useful here.&#10; }&#10; // Discovery is finished&#10; } else if (BluetoothAdapter.ACTION_DISCOVERY_FINISHED.equals(action)) {&#10; // do something useful here&#10; }&#10; }&#10;};&#10;// Register for notification upon discovery of a Bluetooth device&#10;IntentFilter intentFilter = new IntentFilter(BluetoothDevice.ACTION_FOUND);&#10;this.registerReceiver(bluetoothReceiver, intentFilter);&#10;// Register for notification upon completion of the device discovery process&#10;intentFilter = new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);&#10;this.registerReceiver(bluetoothReceiver, intentFilter);&#10;" description="Registers intents for remote device discovery. Also includes a BroadcastReceiver that is notified as each device is found and when the discovery process completes." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>