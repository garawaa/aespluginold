<templateSet group="aes_ui">
  <template name="aes_ui_Pixel_density_independent_touch_gestures" value="private static final float DISTANCE_DIP = 16.0f;&#10;private static final float PATH_DIP = 40.0f;&#10;// convert dip measurements to pixels&#10;final float scale = getResources().getDisplayMetrics().density;&#10;int scaledDistance = (int) (DISTANCE_DIP * scale + 0.5f);&#10;int scaledPath = (int) (PATH_DIP * scale + 0.5f);&#10;// For more information about touch gestures and screens support, see:&#10;// http://developer.android.com/resources/articles/gestures.html&#10;// http://developer.android.com/reference/android/gesture/package-summary.html&#10;// http://developer.android.com/guide/practices/screens_support.html&#10;Scale bitmap to view size - Resize a bitmap to the size of a&#10;view. Useful for creating background images.&#10;originalImage = Bitmap.createScaledBitmap(&#10;originalImage, // bitmap to resize&#10;view.getWidth(), // new width&#10;view.getHeight(), // new height &#10;true); // bilinear filtering" description="Make your touch gestures work the same way, independent of the device pixel density." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_ui_Adjust_widget_size" value="public void onSizeChanged(int w, int h, int oldW,&#10;int oldH) {&#10;// Calculate relative sizes at runtime&#10;// mButton and mButtonBackGround are of type Drawable&#10;int selfW = mButton.getIntrinsicWidth();&#10;int selfH = mButton.getIntrinsicHeight();&#10;int marginX = (w - selfW) / 2;&#10;int marginY = (h - selfH) / 2;&#10;mButtonBackground.setBounds(marginX, marginY,&#10;marginX + selfW, marginY + selfH);&#10;mButton.setBounds(marginX, marginY,&#10;marginX + selfW, marginY + selfH);&#10;// Implement the measureText method to resize text data, if applicable&#10;measureText();&#10;}&#10;" description="Adjust the size of a widget (a button, in this example) when the enclosing view changes its size." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_ui_Respond_to_widget_interaction" value="// Add import android.view.View.OnClickListener; statement&#10;// Add import android.widget.Button; statement&#10;// Add import android.view.View; statement&#10;&#10;Button b1 = (Button) findViewById(R.id.your_button_id); // Use this method carefully, it consumes lots of system resources&#10;b1.setOnClickListener(new OnClickListener() {&#10;public void onClick(View v) {&#10;// Handle the button click here as you wish&#10;}&#10;});&#10;" description="Handle user interaction with a widget (a button, in this example)." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_ui_Move_code_out_of_Ul_thread" value="// You must provide types for the three generic parameters before the code will compile.&#10;// For more details, see http://developer.android.com/reference/android/os/AsyncTask.html&#10;private class MoveOutOfUIthread extends AsyncTask&lt;&#10; Params, // one or more values of this type are passed to doInBackground()&#10; Progress, // the type of the progress units published during background crunching.&#10; Result // the type of the result returned by doInBackground()&#10; &gt;&#10;{&#10; protected Integer doInBackground(Params... p1, p2, p3) {&#10; // your background task here&#10; Result result = new Result();&#10; return result;&#10; }&#10;&#10; protected void onPostExecute(Result r) {&#10; // this gets the object returned by doInBackground, and executes on&#10;the UI thread&#10; }&#10;}&#10;new MoveOutOfUIthread().execute(p1, p2, p3);&#10;" description="Use AsyncTaskto perform background operations, thus avoiding Ul freezes and improving application responsiveness. This helps with Honeycomb (Android 3.0), which enforces the rule &quot;don't do network access in the Ul thread&quot; (throws exception)." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_ui_Background_task_with_status_bar_notification" value="// This code is supposed to be used as an inner class and will start a&#10;// background task while it notifies the user via the status bar. The outer class&#10;// must implement Context (sub)classes like Activity and Service. Use&#10;// new BackgroundTaskWithStatusBarNotification(id, title, text,&#10;// context).execute() to start the background task.&#10;private class BackgroundTaskWithStatusBarNotification extends&#10;AsyncTask&lt;Void, Integer, Void&gt; {&#10;// A unique identifier for the notification.&#10;private int mId;&#10;// The text that will be displayed when the status bar is expanded.&#10;private String mShortDesc;&#10;// The text that flows by in the status bar when the notification first&#10;// activates.&#10;private String mContent;&#10;// The application context where the task was launched.&#10;private Context mContext;&#10;// The notification itself.&#10;private Notification mNotification;&#10;// The notification manager retrieved from the system.&#10;private NotificationManager mNotificationManager;&#10;// An intent that will be launched when user clicks the&#10;// notification&#10;PendingIntent mPendingIntent;&#10;public BackgroundTaskWithStatusBarNotification(int id,&#10;String shortDesc, String content, Context context) {&#10;mId = id;&#10;mShortDesc = shortDesc;&#10;mContent = content;&#10;mContext = context;&#10;}&#10;protected void onPreExecute() {&#10;mNotificationManager = (NotificationManager)&#10;getSystemService(Context.NOTIFICATION_SERVICE);&#10;mNotification = new Notification(&#10;android.R.drawable.stat_sys_download, mContent,&#10;System.currentTimeMillis());&#10;// TODO: enter the initial text for your task here, such as:&#10;// &quot;0% complete&quot;.&#10;String progressText = &quot;your_text_here&quot;;&#10;// this intent will be launched when user clicks the notification in the&#10;// status bar and will start activity YourActivity&#10;Intent intent = new Intent(mContext, YourActivity.class);&#10;mPendingIntent = PendingIntent.getActivity(mContext, 0,intent, 0);&#10;// updates the notification&#10;mNotification.setLatestEventInfo(mContext, mShortDesc, progressText, mPendingIntent);&#10;mNotification.flags = Notification.FLAG_ONGOING_EVENT;&#10;mNotificationManager.notify(mId, mNotification);&#10;}&#10;@Override&#10;protected Void doInBackground(Void... argList) {&#10;// TODO: add the content of your background task here. Call&#10;// AsyncTask.publishProgress() method to update the&#10;// tasks progress (method onProgressUpdate() will handle this&#10;// progress update).&#10;return null;&#10;}&#10;protected void onProgressUpdate(Integer... progress) {&#10;// TODO: supply the text that must be displayed while the task&#10;is in&#10;// progress. For instance, &quot;progress[0] + &quot;% complete&quot;.&#10;String contentText = &quot;your_text_here&quot;;&#10;// updates the notification&#10;mNotification.setLatestEventInfo(mContext, mShortDesc,&#10;contentText,&#10;mPendingIntent);&#10;mNotificationManager.notify(mId, mNotification);&#10;}&#10;protected void onPostExecute(Void result) {&#10;// TODO: supply the final text that must be displayed when the task&#10;// is done. For instance, &quot;Done&quot;.&#10;String contentText = &quot;your_text_here&quot;;&#10;// updates the notification&#10;mNotification.icon = android.R.drawable.stat_sys_download_done;&#10;mNotification.setLatestEventInfo(mContext, mShortDesc, contentText, mPendingIntent);&#10;mNotificationManager.notify(mId, mNotification);&#10;}&#10;}&#10;" description="Use AsyncTaskto perform a background operation while the user is notified via the status bar." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_ui_Hide_status_bar" value="//Hides status bar (if it was showing)&#10;View v = findViewById(R.id.view_id); &#10;//for example, the ID representing the root of a linear layout&#10;v.setSystemUiVisibility(View.STATUS_BAR_HIDDEN);" description="lights off mode - Hides status bar" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_ui_Make_status_bar_visible" value="//Shows status bar (if it was hidden)&#10;View v = findViewById(R.id.view_id); &#10;//for example, the ID representing the root of a linear layout&#10;v.setSystemUiVisibility(View.STATUS_BAR_VISIBLE);&#10;" description="Shows status bar (if it was hidden)" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>