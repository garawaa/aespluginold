<templateSet group="aes_web_services">
  <template name="aes_web_Executing_a_GET_request" value="// To use these Internet methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;URI myURI = null;&#10;try {&#10;myURI = new URI(&quot;www.webserver.org&quot;);&#10;} catch (URISyntaxException e) {&#10;// Deal with it&#10;}&#10;HttpClient httpClient = new DefaultHttpClient();&#10;HttpGet getMethod = new HttpGet(myURI);&#10;HttpResponse webServerResponse = null;&#10;try {&#10;webServerResponse = httpClient.execute(getMethod);&#10;} catch (ClientProtocolException e) {&#10;// Deal with it&#10;} catch (IOException e) {&#10;// Deal with it&#10;}&#10;HttpEntity httpEntity = webServerResponse.getEntity();&#10;if (httpEntity != null) {&#10;// You have your response; handle it. For instance, with an input&#10;// stream&#10;// InputStream input = entity.getContent();&#10;}&#10;" description="Executes a GET request using the Apache HTTPCIient" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_web_Executing_a_POST_request" value="// To use these Internet methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;// Create the Apache HTTP client and post&#10;HttpClient httpclient = new DefaultHttpClient();&#10;HttpPost httppost = new HttpPost(&quot;http://www.website.org/service.php&quot;);&#10;&#10; try {&#10; // Add data to your post&#10; List&lt;NameValuePair&gt; pairs = new ArrayList&lt;NameValuePair&gt;(2); &#10; pairs.add(new BasicNameValuePair(&quot;ID&quot;, &quot;VALUE&quot;));&#10; pairs.add(new BasicNameValuePair(&quot;string&quot;, &quot;Yeah!&quot;));&#10; httppost.setEntity(new UrlEncodedFormEntity(pairs));&#10;&#10; //Finally, execute the request&#10; HttpResponse webServerAnswer = httpclient.execute(httppost);&#10;&#10;} catch (ClientProtocolException e) {&#10; //Deal with it&#10;} catch (IOException e) {&#10; //Deal with it&#10;}&#10;" description="Executes a post request using the Apache HTTPCIient" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_web_Retrieve_JSON_from_a_server_response" value="// To use these Internet methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;// The JSON objects&#10;JSONObject myJSON = null;&#10;JSONArray names = null;&#10;JSONArray values = null;&#10;&#10;String restWebServerResponse = &quot;TheResponse&quot;;&#10;try{&#10; myJSON = new JSONObject(restWebServerResponse);&#10; names = myJSON.names();&#10; values = myJSON.toJSONArray(names);&#10;}&#10;catch (JSONException e) {&#10; // Deal with it&#10;}&#10;&#10;for (int i = 0; i &lt; values.length(); i++) {&#10; // Do something with values.getString(i)&#10;}&#10;" description="Retrieve JSON objects from a RESTful web server response. See the &quot;Query for a REST response&quot; snippet to get the response." toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_web_Query_for_a_REST_response" value="// To use these Internet methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;// This assumes that you have a URL from which to get the answer&#10;URI myURL = new URI(&quot;www.website.org&quot;);&#10;// The HTTP objects&#10;HttpClient httpClient = new DefaultHttpClient();&#10;HttpGet getMethod = new HttpGet(myURL);&#10;HttpResponse httpResponse;&#10;// The query result&#10;String result = null;&#10;try {&#10;httpResponse = httpClient.execute(getMethod);&#10;// You might want to check response.getStatusLine().toString()&#10;HttpEntity entity = httpResponse.getEntity();&#10;if (entity != null) {&#10;InputStream instream = entity.getContent();&#10;BufferedReader reader = new BufferedReader( new&#10;InputStreamReader(instream));&#10;StringBuilder sb = new StringBuilder();&#10;String line = null;&#10;try {&#10;while ((line = reader.readLine()) != null) {&#10;sb.append(line + &quot;\n&quot;);&#10;}&#10;} catch (IOException e) {&#10;// Deal with it&#10;} finally {&#10;try {&#10;instream.close();&#10;} catch (IOException e) {&#10;// Deal with it&#10;}&#10;}&#10;// Handle the result (for instance, get a JSON object&#10;// using the &quot;Retrieve JSON from a server response&quot; snippet)&#10;handleResult(result);&#10;}&#10;} catch (ClientProtocolException e) {&#10;// Deal with it&#10;} catch (IOException e) {&#10;// Deal with it&#10;}&#10;" description="Query for a REST response from a web server using a GET request" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_web_Send_an_email" value="// To use these Internet methods, AndroidManifest.xml must have the following permission:&#10;// &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);&#10;emailIntent.setType(&quot;plain/text&quot;);&#10;emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new&#10;String[]{&quot;to@email.com&quot;});&#10;emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, &quot;Hello!&quot;);&#10;emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, &quot;Hello!&quot;);&#10;startActivity(Intent.createChooser(emailIntent, &quot;Send mail...&quot;));&#10;" description="Send an email message where the subject, body, and destination are all text strings" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_web_Retrieve_data_from_a_URL" value="// To use these Internet methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;// The data that is retrieved&#10;String result = null;&#10;try {&#10; // This assumes that you have a URL from which the response will come&#10; URL url = new URL(&quot;www.webaddress.org&quot;);&#10;&#10; // Open a connection to the URL and obtain a buffered input stream&#10; URLConnection connection = url.openConnection();&#10; InputStream inputStream = connection.getInputStream();&#10; BufferedInputStream bufferedInput = new BufferedInputStream(inputStream);&#10;&#10; // Read the response into a byte array&#10; ByteArrayBuffer byteArray = new ByteArrayBuffer(50);&#10; int current = 0;&#10; while((current = bufferedInput.read()) != -1){&#10; byteArray.append((byte)current);&#10; }&#10; // Construct a String object from the byte array containing the response&#10; result = new String(byteArray.toByteArray());&#10;} catch (Exception e) {&#10;}&#10;// Handle the result&#10;handleResult(result);&#10;" description="Open a connection to a given URL and get the response as a String" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="aes_web_SOAP_example" value="// To use these Internet methods, AndroidManifest.xml must have the following permission:&#10;//&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;&#10;/* This example is intended to be used with the kSOAP&#10;* project (http://ksoap2.sourceforge.net/), which&#10;* provides some objects to deal with SOAP within&#10;* mobile development.&#10;*&#10;* You must download the kSOAP objects and&#10;* have something like this in your import list:&#10;* import org.ksoap2.SoapEnvelope; // (and other necessary classes)&#10;*/&#10;String SOAP_ACTION = &quot;yourMethod&quot;;&#10;String METHOD_NAME = &quot;yourMethod&quot;;&#10;String NAMESPACE = &quot;http://namespace.com/&quot;;&#10;String URL = &quot;http://server.org&quot;;&#10;SoapObject request = new SoapObject(NAMESPACE, METHOD_NAME);&#10;request.addProperty(&quot;property1&quot;, &quot;property&quot;);&#10;SoapSerializationEnvelope envelope = new&#10;SoapSerializationEnvelope(SoapEnvelope.VER11);&#10;envelope.setOutputSoapObject(request);&#10;HttpTransportSE androidHttpTransport = new HttpTransportSE(URL);&#10;androidHttpTransport.call(SOAP_ACTION, envelope);&#10;Object results = envelope.getResponse();&#10;// Handle the results&#10;handleResults(results);&#10;" description="Example of accessing and parsing SOAP from a web server using the KSoap project" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
</templateSet>